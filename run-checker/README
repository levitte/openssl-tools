This tool is used to build various predefined config options of
openssl and generate okay/fail reports.  The array of config options
is found in run-checker.sh, assigned to 'opts'.

Quick manual run
----------------

To run a check on the master branch:

    git clone git://git.openssl.org/openssl.git openssl
    /path/to/run-checker.sh

To run a check on a release branch:

    git clone -b OpenSSL_1_1_0-stable git://git.openssl.org/openssl.git openssl
    /path/to/run-checker.sh


Hooks
-----

run-checker supports a few hooks, in form of scripts that are
executed:

hook-prepare		This script is run once, when run-checker is
			starting.  If it exits with a status other
			than zero, run-checker.sh will stop.  It gets
			no arguments.

hook-start		This script is run before each option build.
			If it exits with a status other than zero,
			run-checker.sh will skip the current build.
			It gets the following arguments:

			$1	The build directory.
			$2	The option being checked.
			$3...	Configure options and arguments.

hook-end		This script is run after each option build.
			If gets the following arguments:

			$1	The build directory.
			$2	"pass" or "fail", depending on the
				build result.

hook-takedown		This script is run once, just before
			run-checker terminates.  It gets no arguments.


The hooks and documentation in run-checker-autohooks are an advanced
example, and what the OpenSSL Team runs daily (automatically).


Example hooks 1
---------------

The run-checker script uses disk space by leaving every build tree
behind!  It may be that you want to clear the build tree after each
build.  This little hook can help:

hook-end:

    #! /bin/sh
    builddir="$1"
    mv "$builddir"/build.log "$builddir".log && rm -rf "$builddir"

Example hook 2
--------------

This is a variant of Example hook 1 that saves away the build dir into
a tarball:

hook-end:

    #! /bin/sh
    builddir="$1"
    tar --remove-files -cJf "$builddir.tar.xz" "./$builddir"

Example hook 3
--------------

You might want to avoid some builds, based on the options.  For
example, all the fuzz builds may require installations that you're not
willing to do.  hook-start is the perfect place for this:

    #! /bin/sh
    if [ echo "$2" | grep -E '.*fuzz.*' ]; then exit 1; fi
    exit 0
